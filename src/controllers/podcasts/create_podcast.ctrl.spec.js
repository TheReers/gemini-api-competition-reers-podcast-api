import { createPodcast, createTestUser, getAgent } from '../../shared/test_utils/request_agent'
import expect from '../../shared/test_utils/expect'
import { PodcastStatus } from '../../models/podcast.model.client'
import { generatePodcastProcessor } from '../../queues/generate_podcasts.queue'
import podcastModel from '../../models/podcast.model.server'
import createObjectId from '../../utils/create_object_id.util'

describe('Create Podcast Ctrl', () => {
    it('should return unauthorized if no token is passed', async () => {
        const response = await getAgent().post('/api/v1/podcasts')
            .send({
                message: 'API architecture',
            })

        expect(response.status).toBe(401)
        expect(response.body.message).toBe('Invalid token')
    })

    it('should return error if input is invalid', async () => {
        const { agent } = await createTestUser({ email: 'randomuser@gmail.com', is_verified: true })
        const response = await agent.post('/api/v1/podcasts')
            .send({
                message: 'to',
            })

        expect(response.status).toBe(400)
        expect(response.body.message).toBe('Invalid request body')
        expect(response.body.error.formErrors).toDeepEqual({
            message: 'Message is required and must be at least 3 characters'
        })
    })

    it('should return error if the podcast was previously generated by the user and it\'s completed', async () => {
        const { user, agent } = await createTestUser({ email: 'randomuser@gmail.com', is_verified: true })
        const podcast = await createPodcast({ user: user._id, status: PodcastStatus.PUBLISHED })
        const response = await agent.post('/api/v1/podcasts')
            .send({
                message: podcast.name,
            })

        expect(response.status).toBe(409)
        expect(response.body.message).toBe('Podcast with message already exist')
    })

    it('should return error if the podcast was previously generated but still processing', async () => {
        const { user, agent } = await createTestUser({ email: 'randomuser@gmail.com', is_verified: true })
        const podcast = await createPodcast({ user: user._id, status: PodcastStatus.PROCESSING })
        const response = await agent.post('/api/v1/podcasts')
            .send({
                message: podcast.name,
            })

        expect(response.status).toBe(409)
        expect(response.body.message).toBe('A previous request has been made to create this podcast. It\'s currently being created. You will be notified when it\'s ready.')
    })

    it('should duplicate podcast if same slug exist for another user', async () => {
        const { user } = await createTestUser({ email: 'randomuser@gmail.com', is_verified: true })
        const podcast = await createPodcast({ user: user._id, status: PodcastStatus.PUBLISHED })
        const { agent, user: user2 } = await createTestUser({ email: 'randomuser2@gmail.com', is_verified: true })
        const response = await agent.post('/api/v1/podcasts')
            .send({
                message: podcast.name,
            })

        expect(response.status).toBe(200)
        expect(response.body.message).toBe('Podcast created successfully')
        expect(response.body.data.name).toBe(podcast.name)
        expect(response.body.data.slug).toBe(podcast.slug)
        expect(response.body.data.transcript).toBe(podcast.transcript)
        expect(response.body.data.status === PodcastStatus.PUBLISHED).toBe(true)
        expect(response.body.data.user).toBe(user2._id.toString())
    })

    it('should initiate podcast generation', async () => {
        const { agent, user } = await createTestUser({ email: 'randomuser@gmail.com', is_verified: true })
        const response = await agent.post('/api/v1/podcasts')
            .send({
                message: 'API architecture',
            })

        expect(response.status).toBe(200)
        expect(response.body.message).toBe('Podcast generation request successful. An email will be sent to you when it\'s ready')
        expect(response.body.data.name).toBe('API architecture')
        expect(response.body.data.slug).toBe('api-architecture')
        expect(response.body.data.transcript).toBe(undefined)
        expect(response.body.data.status).toBe(PodcastStatus.QUEUED)
        expect(response.body.data.user).toBe(user._id.toString())
    })

    it('should not initially set some podcast data until it\'s ready', async () => {
        const { agent, user } = await createTestUser({ email: 'randomuser@gmail.com', is_verified: true })
        const response = await agent.post('/api/v1/podcasts')
            .send({
                message: 'API architecture',
            })

        expect(response.status).toBe(200)
        expect(response.body.message).toBe('Podcast generation request successful. An email will be sent to you when it\'s ready')
        expect(response.body.data.name).toBe('API architecture')
        expect(response.body.data.slug).toBe('api-architecture')
        expect(response.body.data.transcript).toBe(undefined)
        expect(response.body.data.url).toBe(undefined)
        expect(response.body.data.duration).toBe(undefined)
        expect(response.body.data.uploader_public_id).toBe(undefined)
        expect(response.body.data.status).toBe(PodcastStatus.QUEUED)
        expect(response.body.data.user).toBe(user._id.toString())
    })

    it('should use the processor to handle the generation', async () => {
        const { agent, user } = await createTestUser({ email: 'randomuser@gmail.com', is_verified: true })
        const response = await agent.post('/api/v1/podcasts')
            .send({
                message: 'API architecture',
            })

        expect(response.status).toBe(200)
        expect(response.body.data.status).toBe(PodcastStatus.QUEUED)
        expect(response.body.data.user).toBe(user._id.toString())

        const p = await createPodcast({
            user: createObjectId(),
            status: PodcastStatus.PUBLISHED,
            url: 'https://www.google.com',
            duration: 12000,
            uploader_public_id: '1234',
            slug: response.body.data.slug,
            name: response.body.data.name,
        })

        await generatePodcastProcessor({
            data: {
                message: response.body.data.name,
                userId: user._id,
                slug: response.body.data.slug,
                _id: response.body.data._id,
            }
        })

        const podcast = await podcastModel.findOne({ slug: 'api-architecture', user: user._id })
        expect(podcast.name).toBe('API architecture')
        expect(podcast.slug).toBe('api-architecture')
        expect(podcast.transcript).toBe(p.transcript)
        expect(podcast.url).toBe(p.url)
        expect(podcast.duration).toBe(p.duration)
        expect(podcast.uploader_public_id).toBe(p.uploader_public_id)
        expect(podcast.status).toBe(PodcastStatus.PUBLISHED)
    })
})
